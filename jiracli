#!/usr/bin/perl
# Copyright (c) 2016 Devon H. O'Dell <dho@fastly.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

use warnings;
use strict;
use utf8;
use Data::Dumper qw/Dumper/;
use Env qw($HOME);
use Config::Simple;
use GraphViz2;
use JIRA::REST;
use Term::ReadLine;

my $term = Term::ReadLine->new('jiracli');
my $OUT = $term->OUT || \*STDOUT;

binmode $OUT, ":encoding(UTF-8)";

my $cfg = new Config::Simple("$HOME/.ughjira.conf") or die "Cannot load $HOME/.ughjira.conf: $!\n";
my $jirauser = $cfg->param('jirauser') or die "Setting 'jirauser' missing from $HOME/.ughjira.conf\n";
my $jirapass = $cfg->param('jirapass') or die "Setting 'jirapass' missing from $HOME/.ughjira.conf\n";
my $jirasite = $cfg->param('jirasite') or die "Setting 'jirasite' missing from $HOME/.ughjira.conf\n";
my $jiraproj = $cfg->param('jiraproj') or die "Setting 'jiraproj' missing from $HOME/.ughjira.conf\n";

print $OUT "ðŸ’©   Welcome to JIRA! ðŸ’© \nPlease be patient while we load a bunch of crap about your installation.\n";

my $jira = JIRA::REST->new($jirasite, $jirauser, $jirapass) || die "Couldn't log in to JIRA";

my $res = eval { $jira->GET('/field'); };
die "Could not get field information: $@" unless $res;

my $customfields_i2n = {};
my $customfields_n2i = {};
foreach my $field (@{$res}) {
	$customfields_i2n->{$field->{id}} = $field->{name};
	$customfields_n2i->{$field->{name}} = $field->{id};
}

my $projects = {};
my $createmeta = {};
$res = eval { $jira->GET('/issue/createmeta', { expand => 'projects.issuetypes.fields' }); };
return "Couldn't resolve creation fields: $@" unless $res;

foreach my $project (@{$res->{projects}}) {
	$projects->{$project->{key}} = $project;
}

my $curproj = $jiraproj;
my $curpage = 0;
my $curissue = undef;
my $perpage = 10;
my $nresults = 0;
my $jql = undef;
my @prevargs = undef;
my $prevcmd = undef;

my $prompt = "$curproj J> ";

sub do_search {
	my ($jql, $off, @fields) = @_;

	return $jira->POST('/search', {
		expand		=> 'names',
	}, {
		jql		=> $jql,
		startAt		=> $off,
		maxResults	=> $perpage,
		fields		=> @fields,
	});
}

sub comments {
	my $iss = shift;
	$iss = $curissue if !defined($iss);
	return "No issue specified" if !defined($iss);

	my $res = eval { $jira->GET("/issue/$iss/comment"); };
	return "Error retrieving comments: $@" if !defined($res);

	my $ret = '';
	foreach my $comment (@{$res->{comments}}) {
		$ret .= "Comment From $comment->{author}->{displayName} on $comment->{created}:\n\t$comment->{body}\n";
	}

	chop $ret;
	return $ret;
}

sub comment {
	my $body = shift;
	return "No issue selected (use `show` command)" if !defined($curissue);
	return "No comment provided" if !defined($body);

	my $c = { body => $body };
	my $res = eval { $jira->POST("/issue/$curissue/comment", undef, $c); };
	return "Couldn't create comment: $@" if !defined($res);

	return "Comment at $res->{self}";
}

sub create {
	my $issue = {};

	my $idx = 0;
	my @itypes = @{$projects->{$curproj}->{issuetypes}};

	foreach my $itype (@itypes) {
		print $OUT "$idx. " . $itype->{name} . "\n";
		$idx++;
	}

	my $itype = $term->readline("Issue type: ");
	return "Invalid issue type" if ($itype >= $idx);

	$issue->{fields} = {
		issuetype => {
			id => $itypes[$itype]->{id}
		},
		project => {
			id => $projects->{$curproj}->{id}
		},
	};

	foreach my $field (sort keys %{$itypes[$itype]->{fields}}) {
		my $hr = $itypes[$itype]->{fields}->{$field};

		next if !$hr->{required};
		next if $field eq 'project' or $field eq 'issuetype';

		my $fname = $hr->{name};
		$fname = $customfields_i2n->{$fname} if ($fname =~ m/^customfield_/);

		my $l = $term->readline("$hr->{name}: ");
		if (!defined($l) || $l =~ m/^\s*$/mg) {
			return "Field $hr->{name} required";
		}

		$issue->{fields}->{$field} = $l;
	}

	my $res = eval { $jira->POST('/issue', undef, $issue); };
	return "Error creating issue: $@" if !defined($res);

	return "Created issue $res->{key}";
}

sub status_color {
	my $status = shift;

	return 'black';
}

sub status_bgcolor {
	my $status = shift;

	if ($status eq 'done') {
		return 'gray';
	} else {
		return 'black';
	}
}

sub status_width {
	my $status = shift;

	return 2.5 if $status !~ m/(new|done)/;

	return 1.0;
}

sub status_label {
	my ($status, $label) = @_;

	if ($status ne 'indeterminate') {
		return "$label ($status)";
	} else {
		return $label
	}
}

sub graph {
	my $iss = shift;
	my $recursionmap = shift;
	my $graph = shift;

	$iss = $curissue if !defined($iss);
	return "No issue specified" if !defined($iss);

	if (defined $recursionmap && defined $recursionmap->{$iss}) {
		return;
	}

	my $res = eval {
		$jira->GET("/issue/$iss", { expand => 'names' });
	};
	return "Error with getting issue '$iss': $@" unless ($res);


	$graph = GraphViz2->new(
		edge	=> { color => 'grey' },
		global	=> { directed => 1 },
		graph	=> { label => "$iss Dependencies", rankdir => 'LR' },
		node	=> { shape => 'box', style => 'rounded,filled', fontcolor => 'white' },
	) unless defined $graph;

	my $status = ($res->{fields}->{status}->{statusCategory}->{key});
	my $color = status_color($status);
	my $bgcolor = status_bgcolor($status);
	my $width = status_width($status);
	$graph->add_node(name => $iss, shape => 'box', color => $bgcolor, fillcolor => $bgcolor) unless defined ($recursionmap);

	my $epic_issues = undef;
	my $do_recurse = 0;
	if (is_epic($res)) {
		$jql = '"' . $cfg->param('epiclink') . '"="' .  $res->{fields}->{$customfields_n2i->{$cfg->param('epicname')}} . '"';
		my $perpage_stash = $perpage;
		$perpage = 1000;
		$epic_issues = eval { do_search($jql, 0, [ qw/summary status/ ]) };
		return "Error with search: $@" unless $epic_issues;
		$perpage = $perpage_stash;
		$do_recurse = 1;
	}

	$recursionmap = { $iss => 1 } unless defined $recursionmap;

	foreach my $link (@{$res->{fields}->{issuelinks}}) {
		my $outward = defined ($link->{outwardIssue}) ? 1 : 0;
		my $linktype = $link->{type}->{name};
		my $fromkey = '';
		my $tokey = '';
		my $key = '';
		my $status = '';

		if ($outward) {
			$fromkey = $iss;
			$key = $tokey = $link->{outwardIssue}->{key};
			$status = $link->{outwardIssue}->{fields}->{status}->{statusCategory}->{key};
		} else {
			$tokey = $iss;
			$key = $fromkey = $link->{inwardIssue}->{key};
			$status = $link->{inwardIssue}->{fields}->{status}->{statusCategory}->{key};
		}


		$color = status_color($status);
		my $bgcolor = status_bgcolor($status);
		my $width = status_width($status);
		my $label = status_label($status, $link->{type}->{outward});

		$graph->add_node(name => $key, color => $bgcolor, fillcolor => $bgcolor);
		$graph->add_edge(from => $fromkey, to => $tokey, label => $label, color => $bgcolor, penwidth => $width, fillcolor => $bgcolor, fontcolor => $color);

		$recursionmap->{$key} = 1;

		graph($key, $recursionmap, $graph);
	}

	if ($do_recurse) {
		foreach my $link (@{$epic_issues->{issues}}) {
			my $status = $link->{fields}->{status}->{statusCategory}->{key};

			$color = status_color($status);
			my $bgcolor = status_bgcolor($status);
			my $width = status_width($status);
			my $label = status_label($status, 'Epic Link');

			$graph->add_node(name => $link->{key}, color => $bgcolor, fillcolor => $bgcolor);
			$graph->add_edge(from => $iss, to => $link->{key}, label => $label, fontcolor => 'black', penwidth => $width, fillcolor => $bgcolor, color => $bgcolor);
			graph($link->{key}, $recursionmap, $graph);
		}
	}

	eval { $graph->run(format => 'svg', output_file => "./$iss.svg") };
}

sub help {
	my $topic = shift;

	my $result;
	if (!defined($topic)) {
		$result = <<EOF
Commands:
    co
    comment [key]			Comment on the issue with the provided key

    cs
    comments [key]			Show comments on the issue with the provided key

    c
    create				Create a new issue in the current project

    e
    epic				Jump to epic for the current issue

    g
    graph [key]				Creates a dependency graph, outputs to key.svg
					Uses current issue if no key is provided.

    h
    help				This help text

    n
    next				Next page of results

    o
    open [n]				List n open issues. Default for n is 10

    p
    project				List available projects
    project [proj]			Set active CLI JIRA project key

    q
    quit				Exit the CLI

    r
    reset				Reset to initial context

    se
    search [n] [jql]			Search for issues matching JQL, returning n per page

    s
    sh
    show [key]				Show the issue with the provided key
EOF
	}

	return $result;
}

sub next {
	my $off = $curpage * $perpage;
	my $ret = '';

	return "No more results" if ($off >= $nresults);

	my $res = eval { do_search($jql, $off, [ qw/summary assignee/ ]) };
	return "Error with search: $@" unless ($res);

	foreach my $issue (@{$res->{issues}}) {
		my $name = $issue->{fields}->{assignee}->{displayName};
		$name ||= $issue->{fields}->{assignee}->{key};
		$name ||= "unassigned";
		$ret .= "[$issue->{key}] ($name): $issue->{fields}->{summary}\n";
	}

	$curpage++;

	my $p = $curpage * $perpage;
	$p = $nresults if ($p > $nresults);

	$prompt = "$curproj open $p/$nresults J> ";

	return $ret;
}

sub open {
	my $count = shift;
	my $ret = '';

	$perpage = $count if (defined $count);
	$jql = qq/project = "$curproj" and status = "open"/;

	my $res = eval { do_search($jql, 0, [ qw/summary assignee/ ]) };
	return "Error with search: $@" unless ($res);

	$nresults = $res->{total};
	foreach my $issue (@{$res->{issues}}) {
		my $name = $issue->{fields}->{assignee}->{displayName};
		$name ||= $issue->{fields}->{assignee}->{key};
		$name ||= "unassigned";
		$ret .= "[$issue->{key}] ($name): $issue->{fields}->{summary}\n"
	}

	$curpage = 1;

	my $p = $perpage;
	$p = $nresults if ($perpage > $nresults);

	$prompt = "$curproj open $p/$nresults J> ";

	return $ret;
}

sub project {
	my $project = shift;

	if (!defined($project)) {
		my $ret = '';
		foreach my $project (keys %{$projects}) {
			$ret .= "$project:\t" . $projects->{$project}->{name} . "\n";
		}

		return $ret;
	}

	$curproj = $project;
	$prompt = "$curproj J> ";
	return "Project set to: $curproj";
}

sub quit {
	print $OUT "Bye.\n";
	exit 0;
}

sub reset {
	$curpage = 0;
	$nresults = 0;
	$perpage = 10;
	$curissue = undef;
	$curproj = $jiraproj;
	$jql = undef;
	@prevargs = undef;
	$prevcmd = undef;

	$prompt = "$jiraproj J> ";
}

sub search {
	my $count = shift;
	my $query = join ' ', @_;

	return "No JQL provided" if (!defined($query));
	return "No count specified" if (!defined($count));

	my $ret = '';

	$perpage = $count;
	$jql = $query;

	my $res = eval { do_search($jql, 0, [ qw/summary assignee/ ]) };
	return "Error with search: $@" unless ($res);

	$nresults = $res->{total};
	foreach my $issue (@{$res->{issues}}) {
		my $name = $issue->{fields}->{assignee}->{displayName};
		$name ||= $issue->{fields}->{assignee}->{key};
		$name ||= "unassigned";
		$ret .= "[$issue->{key}] ($name): $issue->{fields}->{summary}\n"
	}

	$curpage = 1;

	my $p = $perpage;
	$p = $nresults if ($perpage > $nresults);
	$prompt = "$curproj search $p/$nresults J> ";

	return $ret;
}

sub is_epic {
	my $obj = shift;

	if (defined $obj->{fields}->{$customfields_n2i->{$cfg->param('epicname')}}) {
		return 1;
	}

	return 0;
}

sub show {
	my $key = shift;

	return "No issue specified" if (!defined($key));

	my $res = eval {
		$jira->GET("/issue/$key", { expand => 'names' });
	};
	return "Error with getting issue '$key': $@" unless ($res);

	my $isstype = "Issue";
	my $epic_text = "Epic: ";

	if (is_epic($res)) {
		$isstype = "Epic";
		$isstype = "Epic";
		$epic_text .= 'This issue is an epic';
	} else {
		$epic_text .= defined($res->{fields}->{$customfields_n2i->{$cfg->param('epiclink')}})
			?  $res->{fields}->{$customfields_n2i->{$cfg->param('epiclink')}}
			: 'This issue is not part of an epic';
	}

	$curissue = $key;

	$prompt = "$curproj show $curissue J> ";

	return <<EOF
$isstype [$key]:
Summary:   $res->{fields}->{summary}
Priority:  $res->{fields}->{priority}->{name}
$epic_text
Description:
$res->{fields}->{description}
EOF
}

my $main_cmds = {
	'co'		=> \&comment,
	'comment'	=> \&comment,

	'cs'		=> \&comments,
	'comments'	=> \&comments,

	'c'		=> \&create,
	'create'	=> \&create,

	'e'		=> \&epic,
	'epic'		=> \&epic,

	'g'		=> \&graph,
	'graph'		=> \&graph,

	'h'		=> \&help,
	'help'		=> \&help,

	'n'		=> \&next,
	'next'		=> \&next,

	'o'		=> \&open,
	'open'		=> \&open,

	'p'		=> \&project,
	'project'	=> \&project,

	'q'		=> \&quit,
	'quit'		=> \&quit,

	'r'		=> \&reset,
	'reset'		=> \&reset,

	'se'		=> \&search,
	'search'	=> \&search,

	's'		=> \&show,
	'sh'		=> \&show,
	'show'		=> \&show,
};

sub handle_arg {
	my $cmd = shift;
	my @args = @_;

	if (!defined ($cmd)) {
		$cmd = $prevcmd if (!defined($cmd));
		@args = @prevargs if (!@args);
	}

	$prevcmd = $cmd;
	@prevargs = @args;

	return "Invalid command: $cmd\n" . $main_cmds->{'help'}() if !defined($main_cmds->{$cmd});
	
	return $main_cmds->{$cmd}(@args);
}

while (defined (my $line = $term->readline($prompt))) {
	my @args = split /\s+/, $line;

	my $res = handle_arg(@args);
	print $OUT $res, "\n";
}

print $OUT "\n";
